
giroscopio_2023_II.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000db9  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b0  00000000  00000000  000011c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fc  00000000  00000000  00001b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002274  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ea  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003bb  00000000  00000000  0000293e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002cf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 77 00 	call	0xee	; 0xee <main>
  88:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <i2c_init>:
#include <util/delay.h>
#include "i2c.h"

void i2c_init(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
  90:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
  94:	84 e1       	ldi	r24, 0x14	; 20
  96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Activa la interfaz TWI
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a0:	08 95       	ret

000000a2 <i2c_start>:
}

void i2c_start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //Genera condición de START
  a2:	84 ea       	ldi	r24, 0xA4	; 164
  a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
  a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ac:	88 23       	and	r24, r24
  ae:	e4 f7       	brge	.-8      	; 0xa8 <i2c_start+0x6>
}
  b0:	08 95       	ret

000000b2 <i2c_stop>:

void i2c_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //Genera condición de STOP
  b2:	84 e9       	ldi	r24, 0x94	; 148
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e9       	ldi	r24, 0x9F	; 159
  ba:	9f e0       	ldi	r25, 0x0F	; 15
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <i2c_stop+0xa>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <i2c_stop+0x10>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <i2c_write>:
	_delay_ms(1);
}

void i2c_write(uint8_t data)
{
	TWDR = data; //Byte a escribir
  c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Escritura con reconocimiento (TWEA=1)
  ca:	84 ec       	ldi	r24, 0xC4	; 196
  cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
  d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d4:	88 23       	and	r24, r24
  d6:	e4 f7       	brge	.-8      	; 0xd0 <i2c_write+0xa>
}
  d8:	08 95       	ret

000000da <i2c_read>:

uint8_t i2c_read(void){
	TWCR = (1<<TWINT)|(1<<TWEN); //Lectura sin reconocimiento (TWEA=0)
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //Espera hasta que TWINT=0 (TWI termina su trabajo)
  e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e4:	88 23       	and	r24, r24
  e6:	e4 f7       	brge	.-8      	; 0xe0 <i2c_read+0x6>
	return TWDR; //Regresa el valor leído
  e8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
  ec:	08 95       	ret

000000ee <main>:
#include <util/delay.h>
#include "mpu_6050.h"

int main(void){
	
	init_MPU6050();
  ee:	0e 94 c1 00 	call	0x182	; 0x182 <init_MPU6050>
	i2c_test_conection();
  f2:	0e 94 b2 00 	call	0x164	; 0x164 <i2c_test_conection>
  
}
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret

000000fc <mpu_command>:
#include "i2c.h"

volatile uint8_t buffer[14];

//***Función para enviar datos de comandos al MPU6050
void mpu_command(uint8_t command, uint8_t data){
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	d8 2f       	mov	r29, r24
 102:	c6 2f       	mov	r28, r22
	
	i2c_start();
 104:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_start>
	
	i2c_write(MPU6050_ADDR << 1 | MPU6050_WRITE);
 108:	80 ed       	ldi	r24, 0xD0	; 208
 10a:	0e 94 63 00 	call	0xc6	; 0xc6 <i2c_write>
	i2c_write(command);
 10e:	8d 2f       	mov	r24, r29
 110:	0e 94 63 00 	call	0xc6	; 0xc6 <i2c_write>
	i2c_write(data);
 114:	8c 2f       	mov	r24, r28
 116:	0e 94 63 00 	call	0xc6	; 0xc6 <i2c_write>
	
	i2c_stop();
 11a:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_stop>
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <mpu_read>:

//***Función para leer los datos del MPU6050, verificar la forma de envío de datos por parte del MPU6050
//***Dado que los registros de Giroscopio y Acelerómetro son de 16 bits es importante verificar la captura de los datos recibidos
int8_t mpu_read(uint8_t regAddr){
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	1f 92       	push	r1
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	18 2f       	mov	r17, r24
	
	volatile int8_t data_read = 0;
 132:	19 82       	std	Y+1, r1	; 0x01
	
	i2c_start();
 134:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_start>
	
	i2c_write(MPU6050_ADDR << 1 | MPU6050_WRITE);
 138:	80 ed       	ldi	r24, 0xD0	; 208
 13a:	0e 94 63 00 	call	0xc6	; 0xc6 <i2c_write>
	i2c_write(regAddr);
 13e:	81 2f       	mov	r24, r17
 140:	0e 94 63 00 	call	0xc6	; 0xc6 <i2c_write>
	
	i2c_start();
 144:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_start>
	i2c_write(MPU6050_ADDR << 1 | MPU6050_READ);
 148:	81 ed       	ldi	r24, 0xD1	; 209
 14a:	0e 94 63 00 	call	0xc6	; 0xc6 <i2c_write>
	data_read = i2c_read();
 14e:	0e 94 6d 00 	call	0xda	; 0xda <i2c_read>
 152:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_stop();
 154:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_stop>
	
	return data_read;
 158:	89 81       	ldd	r24, Y+1	; 0x01
}
 15a:	0f 90       	pop	r0
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	08 95       	ret

00000164 <i2c_test_conection>:

void i2c_test_conection(void){
	
	uint8_t mpu_who_ami = 0;
	DDRB &= 0 << PB5;
 164:	84 b1       	in	r24, 0x04	; 4
 166:	14 b8       	out	0x04, r1	; 4
	mpu_who_ami=mpu_read(MPU_WHO_AM_I);
 168:	85 e7       	ldi	r24, 0x75	; 117
 16a:	0e 94 92 00 	call	0x124	; 0x124 <mpu_read>
	
	if ((MPU6050_ADDR & mpu_who_ami) == 0x68){
 16e:	88 76       	andi	r24, 0x68	; 104
 170:	88 36       	cpi	r24, 0x68	; 104
 172:	21 f4       	brne	.+8      	; 0x17c <i2c_test_conection+0x18>
		PORTB |= 1 << PB5;
 174:	85 b1       	in	r24, 0x05	; 5
 176:	80 62       	ori	r24, 0x20	; 32
 178:	85 b9       	out	0x05, r24	; 5
 17a:	08 95       	ret
	}
	else{
		PORTB &= 0 <<PB5;
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	15 b8       	out	0x05, r1	; 5
 180:	08 95       	ret

00000182 <init_MPU6050>:
//*** Función de inicialización del MPU6050
//*** Configura los parámetros de funcionamiento de este y establece la rutina de inicio descrita en
//*** la hoja de datos técnicos
void init_MPU6050(void){
	
	i2c_init();										//Inicia la comunicación I2C
 182:	0e 94 48 00 	call	0x90	; 0x90 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	25 e3       	ldi	r18, 0x35	; 53
 188:	2a 95       	dec	r18
 18a:	f1 f7       	brne	.-4      	; 0x188 <init_MPU6050+0x6>
 18c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	91 ee       	ldi	r25, 0xE1	; 225
 192:	24 e0       	ldi	r18, 0x04	; 4
 194:	81 50       	subi	r24, 0x01	; 1
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	20 40       	sbci	r18, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <init_MPU6050+0x12>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <init_MPU6050+0x1c>
 19e:	00 00       	nop
	
	_delay_us(10);									//*** Tiempo de espera hasta que se complete el proceso de inicio del MPU6050
													//*** el tiempo establecido se describe en el Datasheet del MPU6050
	_delay_ms(100);									//***
	
	mpu_command(MPU_PWR_MGMT_1, 0x00 << SLEEP);		//Deshabilita el modo sleep
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	8b e6       	ldi	r24, 0x6B	; 107
 1a4:	0e 94 7e 00 	call	0xfc	; 0xfc <mpu_command>
	
	mpu_command(MPU_PWR_MGMT_1, 0x01 << CLKSEL);	//Selecciona el reloj interno del MPU6050
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	8b e6       	ldi	r24, 0x6B	; 107
 1ac:	0e 94 7e 00 	call	0xfc	; 0xfc <mpu_command>
	
	mpu_command(MPU_CONFIG, 0x03 << DLPF_CFG);		//Configura la frecuencia del filtro pasa bajas digital interno
 1b0:	63 e0       	ldi	r22, 0x03	; 3
 1b2:	8a e1       	ldi	r24, 0x1A	; 26
 1b4:	0e 94 7e 00 	call	0xfc	; 0xfc <mpu_command>
	
	mpu_command(MPU_SMPLRT_DIV, 0x04);				//Configura el factor de preescaler del reloj interno 
 1b8:	64 e0       	ldi	r22, 0x04	; 4
 1ba:	89 e1       	ldi	r24, 0x19	; 25
 1bc:	0e 94 7e 00 	call	0xfc	; 0xfc <mpu_command>
	
	mpu_command(MPU_GYRO_CONFIG, 0x03 << FS_SEL);	//***Selecciona la frecuencia de muestreo tanto del giroscopio
 1c0:	68 e1       	ldi	r22, 0x18	; 24
 1c2:	8b e1       	ldi	r24, 0x1B	; 27
 1c4:	0e 94 7e 00 	call	0xfc	; 0xfc <mpu_command>
	mpu_command(MPU_ACCEL_CONFIG, 0x03 << AFS_SEL);	//***como del acelerómetro
 1c8:	68 e1       	ldi	r22, 0x18	; 24
 1ca:	8c e1       	ldi	r24, 0x1C	; 28
 1cc:	0e 94 7e 00 	call	0xfc	; 0xfc <mpu_command>
 1d0:	08 95       	ret

000001d2 <usart_transmit>:
/*
 * Transmite el dato que se pasa como argumento
 */
void usart_transmit( uint8_t data )
{
  while ((UCSR0A & 0x20) == 0x00);  // Espera hasta que el buffer del transmisor estÃ© vacÃ­o (UDRE=1)
 1d2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1d6:	95 ff       	sbrs	r25, 5
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <usart_transmit>
  UDR0 = data; // Cuando el buffer estÃ¡ vacÃ­o, coloca el dato en el registro UDR
 1da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1de:	08 95       	ret

000001e0 <__vector_18>:

/*
* Rutina de atenciÃ³n a las interrupciones del USART
*/
ISR (USART_RX_vect)
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
	usart_received_char=UDR0;
 202:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	usart_transmit(0x40); //Transmite una "A" y luego el caracter tecleado
 20a:	80 e4       	ldi	r24, 0x40	; 64
 20c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <usart_transmit>
	usart_transmit(usart_received_char);
 210:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 214:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <usart_transmit>
}
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
